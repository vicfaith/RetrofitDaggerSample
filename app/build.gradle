apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'jacoco'

android {
    compileSdkVersion 24
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "au.com.vicfaith.android.retrofitdaggersample"
        minSdkVersion 17
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "BASEURL", "\"http://private-b8cf44-androidcleancode.apiary-mock.com/\""
        buildConfigField "int", "CACHETIME", "43200"
    }

    productFlavors {
        dev {
        }

        prod {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

//By default frodo is ON on debug build variants, although
//we can enable-disable it with this configuration.
frodo {
    enabled = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDevDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDevDebugUnitTest.exec', 'outputs/code-coverage/connected/flavors/DEV/*coverage.ec'
    ])
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:recyclerview-v7:24.2.1'

    compile 'com.jakewharton:butterknife:7.0.1'

    //Dagger
    compile 'com.google.dagger:dagger:2.7'
    annotationProcessor "com.google.dagger:dagger-compiler:2.7"
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'javax.inject:javax.inject:1'

    compile 'com.google.code.gson:gson:2.7'

    //Reactive Functionality Dependency.
    compile 'io.reactivex:rxjava:1.2.0'
    compile 'io.reactivex:rxandroid:1.2.1'

    //Retrofit
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

    //Glide
    compile 'com.github.bumptech.glide:glide:3.7.0'

    testCompile 'junit:junit:4.12'
    testAnnotationProcessor "com.google.dagger:dagger-compiler:2.7"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:2.7"

    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile('org.robolectric:robolectric:3.1.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile "org.robolectric:shadows-multidex:3.1.4"
    testCompile "org.robolectric:shadows-play-services:3.1.4"
    testCompile "org.robolectric:shadows-support-v4:3.1.4"
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    androidTestCompile "org.mockito:mockito-core:1.10.19"
    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
}
